/*
Copyright 2024 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise-rollout-api/rollouts/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RolloutHistoryLister helps list RolloutHistories.
// All objects returned here must be treated as read-only.
type RolloutHistoryLister interface {
	// List lists all RolloutHistories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RolloutHistory, err error)
	// RolloutHistories returns an object that can list and get RolloutHistories.
	RolloutHistories(namespace string) RolloutHistoryNamespaceLister
	RolloutHistoryListerExpansion
}

// rolloutHistoryLister implements the RolloutHistoryLister interface.
type rolloutHistoryLister struct {
	indexer cache.Indexer
}

// NewRolloutHistoryLister returns a new RolloutHistoryLister.
func NewRolloutHistoryLister(indexer cache.Indexer) RolloutHistoryLister {
	return &rolloutHistoryLister{indexer: indexer}
}

// List lists all RolloutHistories in the indexer.
func (s *rolloutHistoryLister) List(selector labels.Selector) (ret []*v1alpha1.RolloutHistory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RolloutHistory))
	})
	return ret, err
}

// RolloutHistories returns an object that can list and get RolloutHistories.
func (s *rolloutHistoryLister) RolloutHistories(namespace string) RolloutHistoryNamespaceLister {
	return rolloutHistoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RolloutHistoryNamespaceLister helps list and get RolloutHistories.
// All objects returned here must be treated as read-only.
type RolloutHistoryNamespaceLister interface {
	// List lists all RolloutHistories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RolloutHistory, err error)
	// Get retrieves the RolloutHistory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RolloutHistory, error)
	RolloutHistoryNamespaceListerExpansion
}

// rolloutHistoryNamespaceLister implements the RolloutHistoryNamespaceLister
// interface.
type rolloutHistoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RolloutHistories in the indexer for a given namespace.
func (s rolloutHistoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RolloutHistory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RolloutHistory))
	})
	return ret, err
}

// Get retrieves the RolloutHistory from the indexer for a given namespace and name.
func (s rolloutHistoryNamespaceLister) Get(name string) (*v1alpha1.RolloutHistory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rollouthistory"), name)
	}
	return obj.(*v1alpha1.RolloutHistory), nil
}
