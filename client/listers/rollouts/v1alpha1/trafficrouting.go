/*
Copyright 2024 The Kruise Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openkruise/kruise-rollout-api/rollouts/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficRoutingLister helps list TrafficRoutings.
// All objects returned here must be treated as read-only.
type TrafficRoutingLister interface {
	// List lists all TrafficRoutings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficRouting, err error)
	// TrafficRoutings returns an object that can list and get TrafficRoutings.
	TrafficRoutings(namespace string) TrafficRoutingNamespaceLister
	TrafficRoutingListerExpansion
}

// trafficRoutingLister implements the TrafficRoutingLister interface.
type trafficRoutingLister struct {
	indexer cache.Indexer
}

// NewTrafficRoutingLister returns a new TrafficRoutingLister.
func NewTrafficRoutingLister(indexer cache.Indexer) TrafficRoutingLister {
	return &trafficRoutingLister{indexer: indexer}
}

// List lists all TrafficRoutings in the indexer.
func (s *trafficRoutingLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficRouting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficRouting))
	})
	return ret, err
}

// TrafficRoutings returns an object that can list and get TrafficRoutings.
func (s *trafficRoutingLister) TrafficRoutings(namespace string) TrafficRoutingNamespaceLister {
	return trafficRoutingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficRoutingNamespaceLister helps list and get TrafficRoutings.
// All objects returned here must be treated as read-only.
type TrafficRoutingNamespaceLister interface {
	// List lists all TrafficRoutings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficRouting, err error)
	// Get retrieves the TrafficRouting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrafficRouting, error)
	TrafficRoutingNamespaceListerExpansion
}

// trafficRoutingNamespaceLister implements the TrafficRoutingNamespaceLister
// interface.
type trafficRoutingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficRoutings in the indexer for a given namespace.
func (s trafficRoutingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficRouting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficRouting))
	})
	return ret, err
}

// Get retrieves the TrafficRouting from the indexer for a given namespace and name.
func (s trafficRoutingNamespaceLister) Get(name string) (*v1alpha1.TrafficRouting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficrouting"), name)
	}
	return obj.(*v1alpha1.TrafficRouting), nil
}
